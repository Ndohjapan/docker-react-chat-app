name: Docker Image CI

# Control when the action will run
on:
  # Trigger when the workflow will run but only the master branch
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
jobs:
  # Test the nodejs server
  build_test:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      - uses: actions/checkout@v2

      - name: Buld the test image
        run: docker-compose -f docker-compose-test.yaml build

      - name: test the server
        run: docker-compose -f docker-compose-test.yaml up --abort-on-container-exit

  push_to_Docker_Hub:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Login to docker hub

      - name: login to docker
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build server
        run: docker build -t ndohjapan/chat-server ./simpleServer

      - name: Build socket server
        run: docker build -t ndohjapan/chat-socket ./socketServer

      - name: Build nginx
        run: docker build -t ndohjapan/chat-nginx ./nginx

      - name: Push Server to docker hub
        run: docker push ndohjapan/chat-server

      - name: Push Socket app to docker hub
        run: docker push ndohjapan/chat-socket

      - name: Push Nginx app to docker hub
        run: docker push ndohjapan/chat-nginx

  deploy_to_EBS:
    runs-on: ubuntu-latest

    needs: [push_to_Docker_Hub]

    steps:
      - uses: actions/checkout@v3

      - name: Generate deployment package
        run: zip -r deploy.zip * .[^.]* -x "**node_modules**"

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: "-"
          flags: "g"

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: react-chat-app
          environment_name: Reactchatapp-env
          version_label: "e-learn-${{ steps.format-time.outputs.replaced }}"
          region: eu-west-2
          deployment_package: deploy.zip

      - name: Deployed!
        run: echo App deployed to ELB
